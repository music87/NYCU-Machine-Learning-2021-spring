import numpy as npimport matplotlib.pyplot as pltdef load_file():    fin = open('./data/input.data', 'r')    trainX=np.zeros(0)    trainY=np.zeros(0)    for line in fin.readlines():        x,y=np.float_(line.split(' '))        trainX=np.append(trainX,x)        trainY=np.append(trainY,y)    #plt.scatter(trainX,trainY)    return trainX,trainYdef kernel(x1,x2,alpha=1,lengthScale=1):    #rational quadratic kernel, K(x, x') = (1 + (x-x')^2 / (2*alpha * length_scale^2))^-alpha,  refer to https://www.cs.toronto.edu/~duvenaud/cookbook/    #compute "every" data point pairs' similarity by kernel    x1=x1.reshape(-1,1)    x2=x2.reshape(1,-1)    return np.power(1 + np.power((x1-x2),2)/(2*alpha*lengthScale**2),-alpha)def drawing(trainX,trainY,testX,testY_mean,testY_sd):    #color list : https://zhuanlan.zhihu.com/p/65220518    plt.plot(trainX,trainY,'ko') # Show all training data points.    plt.plot(testX,testY_mean,'k-')    plt.fill_between(testX,testY_mean+2*testY_sd,testY_mean-2*testY_sd,facecolor='papayawhip') #draw 95% confident interval => 2*standard deviation ;vs.  68%=>1*standard deviation , 99.7%=>3*standard deviation    plt.xlim(-60,60)    plt.show()